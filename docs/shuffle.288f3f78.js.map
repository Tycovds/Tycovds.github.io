{"version":3,"sources":["../src/shuffle.js","../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/hyphenate.js","js/shuffle.js"],"names":["Shuffle","getNumber","value","parseFloat","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","ShuffleItem","element","isVisible","isHidden","classList","remove","Classes","add","removeAttribute","setAttribute","addClasses","applyCss","Css","INITIAL","scale","Scale","point","classes","forEach","className","obj","Object","keys","key","style","removeClasses","position","visibility","willChange","before","opacity","after","transitionDelay","document","body","documentElement","e","createElement","cssText","appendChild","window","getComputedStyle","removeChild","getNumberStyle","styles","testComputedSize","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","randomize","array","n","length","i","Math","floor","random","temp","defaults","reverse","by","compare","sorter","arr","options","opts","assign","original","Array","from","revert","sort","valA","valB","undefined","transitions","eventName","count","uniqueId","cancelTransitionEnd","removeEventListener","listener","onTransitionEnd","callback","evt","currentTarget","target","addEventListener","arrayMax","max","apply","arrayMin","min","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","ceil","getAvailablePositions","positions","available","push","slice","getShortColumn","buffer","minPosition","len","getItemPosition","itemSize","gridSize","total","span","setY","shortColumnIndex","setHeight","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","lastItem","intersectingRect","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","rowIndex","findIndex","items","includes","splice","concat","map","hyphenate","str","replace","m1","toLowerCase","arrayUnique","Set","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","el","_getElementOption","TypeError","_init","TinyEmitter","_getItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","nodeType","jquery","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","call","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","positionProps","useTransforms","cssProps","k","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","matches","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","name","data","shuffle","emit","itemPositions","_getNextPositions","equals","getStylesForTransition","_getStaggerAmount","isCentered","itemsData","_getItemPosition","getTransformedPositions","_getConcealedItems","update","styleObject","roundTransforms","transform","itemCallback","done","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","callbacks","_getTransitionFunction","parallel","_movementFinished","objects","elements","_skipTransitions","sortOptions","_filter","_shrink","_updateItemCount","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","allItems","sortedItems","_mergeNewItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","oldItems","getItemByElement","once","_disposeItems","parentNode","REMOVED","find","includeMargins","zero","duration","delay","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions","require","default","container","allBtn","getElementById","cssBtn","vueBtn","javascriptBtn","shuffleInstance"],"mappings":"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","file":"shuffle.288f3f78.js","sourceRoot":"..","sourcesContent":["import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter(el => matches(el, this.options.itemSelector))\n      .map(el => new ShuffleItem(el));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns)\n        < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      styles.left = item.point.x + 'px';\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = item => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map(element => this.getItemByElement(element))\n      .filter(item => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter(item => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find(item => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","let value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  value = window.getComputedStyle(e, null).width === '10px';\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some(itemRect => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map(itemRect => new Point(itemRect.left, itemRect.top));\n}\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n","let Shuffle = require('shufflejs').default;\r\nlet container = document.querySelector('.project-container');\r\nlet allBtn = document.getElementById('all-filter');\r\nlet cssBtn = document.getElementById('css-filter');\r\nlet vueBtn = document.getElementById('vue-filter');\r\nlet javascriptBtn = document.getElementById('javascript-filter');\r\n\r\n\r\nlet shuffleInstance = new Shuffle(container)\r\nallBtn.addEventListener('click', e => {\r\n    shuffleInstance.filter(Shuffle.ALL_ITEMS)\r\n})\r\njavascriptBtn.addEventListener('click', e => {\r\n    shuffleInstance.filter(['javascript'])\r\n})\r\ncssBtn.addEventListener('click', e => {\r\n    shuffleInstance.filter(['css'])\r\n})\r\nvueBtn.addEventListener('click', e => {\r\n    shuffleInstance.filter(['vue'])\r\n})"]}